#include <stdio.h>
#include <stdlib.h>
#define TAMANHO_PILHA 3
typedef struct {
  int vetor[TAMANHO_PILHA]; // tamanho da pilha
  int topo;
} Pilha;
// prototipo da função empilha
void empilha(int valor, Pilha *P1) {
  // pilha->topo significa: ponteiro "pilha" apontando para CONTEÚDO de um item
  // de uma struct
  if (P1->topo < TAMANHO_PILHA) { // verificando se a pilha não está cheia
    // daí pode empilhar
    P1->vetor[P1->topo] = valor;
    P1->topo++;
    printf("O valor %d foi adicionado \n", valor);
  } else {
    printf("Nao ha mais espaco na pilha, \n");
  }
}
void desempilha(Pilha *P1) {
  if (P1->topo > 0) {
    P1->topo--; // desempilha
    printf("Elemento retirado: %d. \n", P1->vetor[P1->topo]);
  } else {
    printf("A pilha está vazia. \n"); // pilha vazia
  }
}
void imprimePilha(Pilha *P1) {
  int i;
  printf("\nSegue Impressao da Pilha: \n");
  for (i = ((P1->topo) - 1); i >= 0;
       i--) { // valor inicial de i é a ultima posição da pilha e daí decrementa
    printf("\t %d \n", P1->vetor[i]);
  }
}
void iguais(Pilha *P1, Pilha *P2) {
  int diferente = 0;
  for (int i = 0; i < P1->topo; i++) {
    if (P1->vetor[i] != P2->vetor[i]) {
      printf("Pilhas diferentes");
      diferente++;
      break;
    }
  }
  if (diferente == 0)
    printf("Pilhas iguais");
}
void cheia(Pilha *P1) {
  if (P1->topo >= TAMANHO_PILHA)
    printf("Pilha cheia");
  else
    printf("Ainda tem espaço");
}
void inverter(Pilha *P1) {
  int x = (P1->topo) - 1;
  int i, j;
  for (i = 0, j = x; i < x; i++, x--) {
    int temporario = P1->vetor[x];
    P1->vetor[i] = P1->vetor[x];
    P1->vetor[x] = temporario;
  }
}
void transferirElementos(Pilha *P1, Pilha *P2) {
  int i;
  for (i = 0; i < (P1->topo); i++) {
    P2->vetor[i] = P1->vetor[i];
  }
}
int main() {
  // DECLARA UMA PILHA
  Pilha p1, p2;
  p1.topo = 0; // o topo da pilha deve começar em zero
  p2.topo = 0;
  empilha(10, &p1);
  empilha(11, &p1);
  empilha(12, &p1);

  transferirElementos(&p1, &p2);
  iguais(&p1, &p2);

  inverter(&p1);
  imprimePilha(&p1);
}
